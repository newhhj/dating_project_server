// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Strawberry.Server.Database;

namespace Strawberry.Server.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220205074436_0009")]
    partial class _0009
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasCharSet("utf8mb4", DelegationModes.ApplyToAll)
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("Strawberry.Server.Database.Tables.ADData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary Key");

                    b.Property<string>("ADName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("광고명");

                    b.Property<int>("ADType")
                        .HasColumnType("int")
                        .HasComment("광고 타입");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("등록시간");

                    b.Property<string>("JsonData")
                        .HasColumnType("longtext")
                        .HasComment("추가 데이터 (Json)");

                    b.Property<string>("Link")
                        .HasColumnType("longtext")
                        .HasComment("연결링크");

                    b.HasKey("Id");

                    b.ToTable("ADData");

                    b
                        .HasComment("광고정보 테이블");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.BlockWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary Key");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("등록시간");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("단어");

                    b.HasKey("Id");

                    b.ToTable("BlockWord");

                    b
                        .HasComment("제한 단어");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.ChattingMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChattingRoomId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsShow")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChattingRoomId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChattingMessage");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.ChattingRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCloseMember1")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCloseMember2")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Member1Id")
                        .HasColumnType("int");

                    b.Property<int?>("Member2Id")
                        .HasColumnType("int");

                    b.Property<int?>("OpenMemberId")
                        .HasColumnType("int");

                    b.Property<int>("StarPoint")
                        .HasColumnType("int");

                    b.Property<bool>("UsePoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("Member1Id");

                    b.HasIndex("Member2Id");

                    b.ToTable("ChattingRoom");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.HelpMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("HelpMessage");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.LoveFortune", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary Key");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("등록시간");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("메세지");

                    b.HasKey("Id");

                    b.ToTable("LoveFortune");

                    b
                        .HasComment("연애기운 정보");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Passwd")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Manager");

                    b.Property<bool>("Useage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Passwd");

                    b.HasIndex("UserId");

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("AddChatting1Time")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("AddChatting3Time")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("AddChoice3Time")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Alcohol")
                        .HasColumnType("longtext");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Blood")
                        .HasColumnType("longtext");

                    b.Property<string>("BodyStyle")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstVoice")
                        .HasColumnType("longtext");

                    b.Property<int>("FreeChattingCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FreeChattingTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FreeChoiceCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FreeChoiceTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FreeSmartChoiceTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("HasStarBadge")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRoyal")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVIP")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Job")
                        .HasColumnType("longtext");

                    b.Property<string>("JobName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Lat")
                        .HasColumnType("double");

                    b.Property<double>("LevelPoint")
                        .HasColumnType("double");

                    b.Property<int>("LevelType")
                        .HasColumnType("int");

                    b.Property<double>("Lng")
                        .HasColumnType("double");

                    b.Property<DateTime?>("LocationCheckTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("MarketingCheckTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MemberState")
                        .HasColumnType("int");

                    b.Property<string>("Nickname")
                        .HasColumnType("longtext");

                    b.Property<string>("Personality")
                        .HasColumnType("longtext");

                    b.Property<string>("Platform")
                        .HasColumnType("longtext");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PrivacyCheckTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PushToken")
                        .HasColumnType("longtext");

                    b.Property<int>("RateCharming")
                        .HasColumnType("int");

                    b.Property<int>("RateResponse")
                        .HasColumnType("int");

                    b.Property<string>("RecommandCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Referrer")
                        .HasColumnType("longtext");

                    b.Property<string>("Religion")
                        .HasColumnType("longtext");

                    b.Property<string>("School")
                        .HasColumnType("longtext");

                    b.Property<string>("SchoolName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SensitiveCheckTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Smoking")
                        .HasColumnType("longtext");

                    b.Property<int>("Tall")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TermCheckTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("UseNotiAppeal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("UseNotiChattingMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("UseNotiConnect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("UseNotiMarketing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("UseNotiReceiveChoice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("UseNotiReceiveFavorite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("UseNotiRecommand")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("UseNotiSendChoiceConfirm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Gender");

                    b.HasIndex("RecommandCode");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_Account", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("KakaoKey")
                        .HasColumnType("bigint");

                    b.Property<string>("Passwd")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("KakaoKey")
                        .IsUnique();

                    b.ToTable("Member_Account");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_AlertComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AlertCommentId")
                        .HasColumnType("int");

                    b.Property<int?>("AlertMemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AlertCommentId");

                    b.HasIndex("AlertMemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("Member_AlertComment");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_AlertPoomPoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AlertMemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<int?>("PoomPoomId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AlertMemberId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PoomPoomId");

                    b.ToTable("Member_AlertPoomPoom");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_AlertProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Member_AlertProfile");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_Appraisal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppraisalType")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppraisalType");

                    b.HasIndex("MemberId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Member_Appraisal");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_BlockPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Member_BlockPartner");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_CharmingPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("Name");

                    b.ToTable("Member_CharmingPoint");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_ChoicePartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSkip")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Member_ChoicePartner");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_Hotstrawberry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Member_Hotstrawberry");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("Name");

                    b.ToTable("Member_Interest");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_NotShowMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Member_NotShowMember");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsShow")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Member_Notification");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_PointLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AcceptPoint")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentPoint")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Member_PointLog");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_Preference", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Alcohol")
                        .HasColumnType("longtext");

                    b.Property<bool>("BeautyOrWealth")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Body")
                        .HasColumnType("longtext");

                    b.Property<int>("MaxAge")
                        .HasColumnType("int");

                    b.Property<int>("MaxTall")
                        .HasColumnType("int");

                    b.Property<int>("MinAge")
                        .HasColumnType("int");

                    b.Property<int>("MinTall")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<string>("Religion")
                        .HasColumnType("longtext");

                    b.Property<string>("Smoking")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Member_Preference");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_ProfileImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("longtext");

                    b.Property<double>("Ratio")
                        .HasColumnType("double");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Member_ProfileImage");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_PurchaseLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExpireTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsExpire")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Platform")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductId")
                        .HasColumnType("longtext");

                    b.Property<string>("PurchaseId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PurchaseToken")
                        .HasColumnType("longtext");

                    b.Property<int>("PurchaseType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("PurchaseUTCTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("Platform");

                    b.HasIndex("PurchaseId");

                    b.ToTable("Member_PurchaseLog");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_RequestMemberLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Member_RequestMemberLevel");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_RequestRoyal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsFastWork")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Member_RequestRoyal");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_StarPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsSkip")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int>("StarPoint")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Member_StarPoint");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_ViewProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Member_ViewProfile");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.PoomPoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Area")
                        .HasColumnType("longtext");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<int>("ContentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnType("longtext");

                    b.Property<bool>("UseComment")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ContentType");

                    b.HasIndex("MemberId");

                    b.ToTable("PoomPoom");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.PoomPoom_Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("PoomPoomId")
                        .HasColumnType("int");

                    b.Property<int?>("ReplyMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PoomPoomId");

                    b.HasIndex("ReplyMemberId");

                    b.ToTable("PoomPoom_Comment");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.PoomPoom_Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PoomPoomId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PoomPoomId");

                    b.ToTable("PoomPoom_Image");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.PoomPoom_Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("PoomPoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PoomPoomId");

                    b.ToTable("PoomPoom_Like");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdminId")
                        .HasColumnType("longtext");

                    b.Property<string>("AdminPw")
                        .HasColumnType("longtext");

                    b.Property<string>("ContentTerm")
                        .HasColumnType("longtext");

                    b.Property<string>("LocationTerm")
                        .HasColumnType("longtext");

                    b.Property<string>("ManagerEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("MarketingTerm")
                        .HasColumnType("longtext");

                    b.Property<string>("PatentTerm")
                        .HasColumnType("longtext");

                    b.Property<string>("PrivacyTerm")
                        .HasColumnType("longtext");

                    b.Property<string>("SensitiveTerm")
                        .HasColumnType("longtext");

                    b.Property<string>("UseTerm")
                        .HasColumnType("longtext");

                    b.Property<bool>("UseUpdateAdminId")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.ChattingMessage", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.ChattingRoom", "ChattingRoom")
                        .WithMany("ChattingMessages")
                        .HasForeignKey("ChattingRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ChattingRoom");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.ChattingRoom", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member1")
                        .WithMany()
                        .HasForeignKey("Member1Id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member2")
                        .WithMany()
                        .HasForeignKey("Member2Id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Member1");

                    b.Navigation("Member2");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_Account", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithOne("Member_Account")
                        .HasForeignKey("Strawberry.Server.Database.Tables.Member_Account", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_AlertComment", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.PoomPoom_Comment", "AlertComment")
                        .WithMany()
                        .HasForeignKey("AlertCommentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Strawberry.Server.Database.Tables.Member", "AlertMember")
                        .WithMany()
                        .HasForeignKey("AlertMemberId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithMany("Member_AlertComments")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlertComment");

                    b.Navigation("AlertMember");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_AlertPoomPoom", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "AlertMember")
                        .WithMany()
                        .HasForeignKey("AlertMemberId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithMany("Member_AlertPoomPooms")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Strawberry.Server.Database.Tables.PoomPoom", "PoomPoom")
                        .WithMany()
                        .HasForeignKey("PoomPoomId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AlertMember");

                    b.Navigation("Member");

                    b.Navigation("PoomPoom");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_AlertProfile", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithMany("Member_AlertProfiles")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Member");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_Appraisal", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Member");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_BlockPartner", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithMany("Member_BlockPartners")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Member");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_CharmingPoint", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithMany("Member_CharmingPoints")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_ChoicePartner", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithMany("Member_ChoicePartners")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Member");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_Hotstrawberry", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithMany("Member_Hotstrawberrys")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_Interest", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithMany("Member_Interests")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_NotShowMember", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithMany("Member_NotShowMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Member");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_Notification", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_PointLog", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_Preference", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithOne("Member_Preference")
                        .HasForeignKey("Strawberry.Server.Database.Tables.Member_Preference", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_ProfileImage", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithMany("Member_ProfileImages")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_PurchaseLog", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_RequestMemberLevel", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_RequestRoyal", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_StarPoint", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithMany("Member_StarPoints")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Member");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member_ViewProfile", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithMany("Member_ViewProfiles")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Member");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.PoomPoom", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithMany("PoomPooms")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.PoomPoom_Comment", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Strawberry.Server.Database.Tables.PoomPoom", "PoomPoom")
                        .WithMany("PoomPoom_Comments")
                        .HasForeignKey("PoomPoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Strawberry.Server.Database.Tables.Member", "ReplyMember")
                        .WithMany()
                        .HasForeignKey("ReplyMemberId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Member");

                    b.Navigation("PoomPoom");

                    b.Navigation("ReplyMember");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.PoomPoom_Image", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.PoomPoom", "PoomPoom")
                        .WithMany("PoomPoom_Images")
                        .HasForeignKey("PoomPoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PoomPoom");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.PoomPoom_Like", b =>
                {
                    b.HasOne("Strawberry.Server.Database.Tables.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Strawberry.Server.Database.Tables.PoomPoom", "PoomPoom")
                        .WithMany("PoomPoom_Likes")
                        .HasForeignKey("PoomPoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("PoomPoom");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.ChattingRoom", b =>
                {
                    b.Navigation("ChattingMessages");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.Member", b =>
                {
                    b.Navigation("Member_Account");

                    b.Navigation("Member_AlertComments");

                    b.Navigation("Member_AlertPoomPooms");

                    b.Navigation("Member_AlertProfiles");

                    b.Navigation("Member_BlockPartners");

                    b.Navigation("Member_CharmingPoints");

                    b.Navigation("Member_ChoicePartners");

                    b.Navigation("Member_Hotstrawberrys");

                    b.Navigation("Member_Interests");

                    b.Navigation("Member_NotShowMembers");

                    b.Navigation("Member_Preference");

                    b.Navigation("Member_ProfileImages");

                    b.Navigation("Member_StarPoints");

                    b.Navigation("Member_ViewProfiles");

                    b.Navigation("PoomPooms");
                });

            modelBuilder.Entity("Strawberry.Server.Database.Tables.PoomPoom", b =>
                {
                    b.Navigation("PoomPoom_Comments");

                    b.Navigation("PoomPoom_Images");

                    b.Navigation("PoomPoom_Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
